name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
jobs:
    unit-testing:
        name: Unit Testing
        runs-on: ${{ matrix.operating_system }}
        strategy:
          matrix:
            nodejs_version: [18,19,20]
            operating_system: [ubuntu-latest, macos-latest]
            exclude: 
              - nodejs_version: 18
                operating_system: macos-latest
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version
          uses: actions/setup-node@v3
          with:
            node-version: ${{ matrix.nodejs_version}}
        
        - name: Composite Action - Cache & Install NPM packages
          uses: ./.github/custom_actions/npm-action
          with:
            path-to-folder: node_modules
    
        - name: Unit Testing
          run: npm test
          
        - name: Archive Test Result
          uses: actions/upload-artifact@v3
          with:
            name: Mocha-Test-Result
            path: test-results.xml
            
    code-coverage:
      name: code coverage
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4
        
        - name: Setup NodeJS version -18
          uses: actions/setup-node@v3
          with: 
            node-version: 18
        
        - name: Composite Action - Cache & Install NPM packages
          uses: ./.github/custom_actions/npm-action
          with:
            path-to-folder: node_modules
        
        - name: Check code coverage
          run: npm run coverage
          continue-on-error: true

        - name: Archive test result 
          uses: actions/upload-artifact@v4
          with: 
            name: Code-coverage-result
            path: coverage
            retention-days: 5

    reports-s3:
      needs: [code-coverage, unit-testing]
      continue-on-error: true
      name: AWS S3 - Upload reports
      runs-on: ubuntu-latest
      steps:
        - name: Download mocha test artifact 
          uses: actions/download-artifact@v4
          with:
            name: Mocha-Test-Result
        
        - name: Download Code Coverage Artifact
          uses: actions/download-artifact@v4
          with: 
            name: Code-Coverage-Result
        
        - name: Merge Test Files
          run: |
            ls -ltr
            mkdir reports-${{ github.sha }}
            mv cobertura-coverage.xml reports-${{ github.sha }}
            mv test-results.xml reports-${{ github.sha }}
            ls -ltr reports-${{ github.sha }}
        
        - name: Upload to AWS S3
          uses: jakejarvis/s3-sync-action@master
          with:
            args: --follow-symlinks --delete
          env: 
            AWS_S3_BUCKET: solar-system-reports-bucket
            AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION: 'us-east-1'
            SOURCE_DIR: 'reports-${{ github.sha }}'
            DEST_DIR: 'reports-${{ github.sha }}'

    docker:
      name: containerization
      needs: [unit-testing, code-coverage]
      runs-on: ubuntu-latest
      permissions:
        packages: write
      steps:
        - uses: actions/checkout@v4

        - name: Dockerhub Login
          uses: docker/login-action@v2.2.0
          with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_PASSWORD }}

        - name: Github container registry login
          uses: docker/login-action@v2.2.0
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}
        
        - name: Docker Build for testing
          uses: docker/build-and-push@v4
          with:
            context: .
            push: false
            tags: ${{ vars.DOCKERHUB_USERNAME }}/sonar-system:${{ github.sha }}
        
        - name: Docker image test
          run: |
            docker images
            docker run --name solar-system-app -d \
              -p 3000:3000 -e MONGO_URI=$MONGO_URI \
              -e MONGO_USERNAME=$MONGO_USERNAME \
              -e MONGO_PASSWORD=$MONGO_PASSWORD \
              ${{ env.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            
            export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo $IP

            echo Testing image URL using wget
            wget -q -O - 127.0.0.1:3000/live | grep live


        - name: Registry Push
          uses: docker/build-and-push@v4
          with:
            context: .
            push: true
            tags: |
              ${{ vars.DOCKERHUB_USERNAME }}/sonar-system:${{ github.sha }}
              ghcr.io/${{ github.repository_owner}}/solar-system:${{ github.sha }}

    dev-deploy:
      if: contains(github.ref, 'feature/')
      needs: [docker]
      uses: ./.github/workflows/reuse-deployment.yaml
      with:
        mongodb-uri: ${{ vars.MONGO_URI }}
        environment: development
        k8s-manifest-dir: kubernetes/development/
      secrets:
        k8s-kubeconfig: ${{ secrets.KUBECONFIG }}
        mongodb-password: ${{ secrets.MONGO_PASSWORD }}
    
    integration-dev-testing:
      if: contains(github.ref, 'feature/')
      name: Dev Integration Testing
      needs: [dev-deploy]
      runs-on: ubuntu-latest
      steps: 
        - name: Test URL Output using CURL and JQ
          env: 
            URL: ${{ needs.dev-deploy.outputs.application-url }}
          run: |
            echo $URL
            echo "----------"
            curl https://$URL/live -s -k | jq -r .status | grep -i live

    prod-deploy:
      if: github.ref == 'refs/heads/main'
      needs: [docker]
      uses: ./.github/workflows/reuse-deployment.yaml
      with:
        mongodb-uri: ${{ vars.MONGO_URI }}
        environment: development
        k8s-manifest-dir: kubernetes/development/
      secrets:
        k8s-kubeconfig: ${{ secrets.KUBECONFIG }}
        mongodb-password: ${{ secrets.MONGO_PASSWORD }}

    prod-integration-testing:
      if: github.ref == 'refs/heads/main'
      name: Prod Integration Testing
      needs: [dev-deploy]
      runs-on: ubuntu-latest
      steps: 
        - name: Test URL Output using CURL and JQ
          env: 
            URL: ${{ needs.prod-deploy.outputs.application-url }}
          run: |
            echo $URL
            echo "----------"
            curl https://$URL/live -s -k | jq -r .status | grep -i live
    
    slack-notificacion:
      if: always()
      name: Slack notificacion
      needs: [integration-dev-testing, prod-integration-testing]
      runs-on: ubuntu-latest
      continue-on-error: true
      steps:
        - uses: actions/checkout@v4
        - name: Slack notificacion
          uses: rtCamp/action-slack-notify@v2
          env: 
            SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
            SLACK_CHANNEL: github-actions-channel-2 
            SLACK_COLOR: ${{ job.status }}
            SLACK_ICON: https://gitlab.com/sidd-harth/solar-system/-/raw/main/images/saturn.png
            SLACK_MESSAGE: ':hammer_and_wrench: Triggered by ${{ github.actor }}'
            SLACK_TITLE: Information