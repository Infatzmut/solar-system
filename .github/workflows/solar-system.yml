name: Solar System Workflow

on: 
  workflow_dispatch:
  push:
    branches:
      - main
      - 'feature/*'

env:
  MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
  MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
jobs:
    unit-testing:
        name: Unit Testing
        runs-on: ${{ matrix.operating_system }}
        strategy:
          matrix:
            nodejs_version: [18,19,20]
            operating_system: [ubuntu-latest, macos-latest]
            exclude: 
              - nodejs_version: 18
                operating_system: macos-latest
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version
          uses: actions/setup-node@v3
          with:
            node-version: ${{ matrix.nodejs_version}}
        
        - name: cache npm dependencies
          uses: actions/cache@v3
          with: 
            path: node_modules
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json')}}

        - name: Install Dependencies
          run: npm install
    
        - name: Unit Testing
          run: npm test
          
        - name: Archive Test Result
          uses: actions/upload-artifact@v3
          with:
            name: Mocha-Test-Result
            path: test-results.xml
            
    code-coverage:
      name: code coverage
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4
        
        - name: Setup NodeJS version -18
          uses: actions/setup-node@v3
          with: 
            node-version: 18
        
        - name: cache npm dependencies
          uses: actions/cache@v3
          with: 
            path: node_modules
            key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json')}}    
        
        - name: Install Dependencies
          run: npm install 
        
        - name: Check code coverage
          run: npm run coverage
          continue-on-error: true

        - name: Archive test result 
          uses: actions/upload-artifact@v4
          with: 
            name: Code-coverage-result
            path: coverage
            retention-days: 5

    docker:
      name: containerization
      needs: [unit-testing, code-coverage]
      runs-on: ubuntu-latest
      permissions:
        packages: write
      steps:
        - uses: actions/checkout@v4

        - name: Dockerhub Login
          uses: docker/login-action@v2.2.0
          with:
            username: ${{ vars.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_PASSWORD }}

        - name: Github container registry login
          uses: docker/login-action@v2.2.0
          with:
            registry: ghcr.io
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}
        
        - name: Docker Build for testing
          uses: docker/build-and-push@v4
          with:
            context: .
            push: false
            tags: ${{ vars.DOCKERHUB_USERNAME }}/sonar-system:${{ github.sha }}
        
        - name: Docker image test
          run: |
            docker images
            docker run --name solar-system-app -d \
              -p 3000:3000 -e MONGO_URI=$MONGO_URI \
              -e MONGO_USERNAME=$MONGO_USERNAME \
              -e MONGO_PASSWORD=$MONGO_PASSWORD \
              ${{ env.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            
            export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo $IP

            echo Testing image URL using wget
            wget -q -O - 127.0.0.1:3000/live | grep live


        - name: Registry Push
          uses: docker/build-and-push@v4
          with:
            context: .
            push: true
            tags: |
              ${{ vars.DOCKERHUB_USERNAME }}/sonar-system:${{ github.sha }}
              ghcr.io/${{ github.repository_owner}}/solar-system:${{ github.sha }}

    dev-deploy:
      needs: [docker]
      name: deploy
      runs-on: ubuntu-latest
      environment: 
        name: development
        url: https://${{ steps.ingress-app.outputs.APP_INGRESS_HOST }}
      outputs:
        ingress_app: ${{ steps.ingress-app.outputs.APP_INGRESS_HOST }}
      steps:
        - name: Checkout Repo
          uses: actions/checkout@v4

        - name: Install kubectl CLI
          uses: azure/setup-kubectl@v3
          with:
            version: 'latest'
        - name: Set kubernetes config 
          uses: azure/k8s-set-context@v3
          with: 
            method: kubeconfig
            kubeconfig: ${{ secrets.KUBECONFIG }}

        - name: Fetch Kubernetes cluster details
          run: | 
            kubectl --version
            echo "----------"
            kubectl get nodes
        - name: Save NGINX ingress controller ip as env variable
          run: |
            echo "INGRESS_IP=$(kubectl -n ingress-nginx get svc ingress-nginx-controller -o jsonpath="{.status.loadbalancer.ingress[0].ip}")" >> "$GITHUB_ENV"
        - name: Replace kubernetes values
          uses: vinayaja/replace-token@v1.0.1
          env: 
            NAMESPACE: ${{ vars.NAMESPACE }}
            REPLICAS: ${{ vars.REPLICAS }}
            IMAGE: ${{ env.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
            INGRESS_IP: ${{ env.INGRESS_IP }}
          with:
            gh-token: ${{ secrets.GITHUB_TOKEN }} 
            Environment-Name: 'dev'  
            Filespath: ${{ github.workspace}}/kubernetes/development/*.yaml
            FileName: '.json'
            tokenprefix: '_{_'
            tokensuffix: '_}_'
        
        - name: check files
          run: |
            cat kubernetes/development/*.yaml

        ## TODO: Improve this 
        - name: Create MongoDB Secret
          run: | 
            kubectl -n ${{ vars.NAMESPACE }} create secret generic mongo-db-creds \
            --from-literal=MONGO_URI=${{ env.MONGO_URI }} \
            --from-literal=MONGO_USERNAME=${{ env.MONGO_USERNAME }} \
            --from-literal=MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }}    
        - name: Deploy to Dev Env
          run: |
            kubectl apply -f kubernetes/development
        
        - name: Sep App ingress host url 
          id: ingress-app
          run: |
            echo "APP_INGRESS_HOST=$(kubectl -n ${{ vars.NAMESPACE }} get ingress -o jsonpath="{.items[0].spec.tls[0].hosts[0]}")" >> "$GITHUB_OUTPUT"
    
    integration-testing:
      name: Dev Integration Testing
      needs: [dev-deploy]
      runs-on: ubuntu-latest
      steps: 
        - name: Test URL Output using CURL and JQ
          env: 
            URL: ${{ needs.dev-deploy.outputs.ingress_app }}
          run: |
            echo $URL
            echo "----------"
            curl https://$URL/live -s -k | jq -r .status | grep -i live